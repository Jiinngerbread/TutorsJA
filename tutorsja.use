/* Group: TripleJ */

model TutorsJA

--Layout2.clt is used with this version-- 

-- ENUMS -- 
enum GeneralStatus {Not_Approved, Approved, Verified}
enum Grade {Kg3, One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Eleven}
enum AvailabilityStatus {Free, Fully_Booked, Not_Accepting_Requests, Service_Withdrawn}
enum ModeOfDelivery {Online, Face_To_Face, Blended}
enum ServiceType {One_On_One, Group}
enum Days {Mon, Tue, Wed, Thru, Fri, Sat, Sun}
enum Ratings {STAR1, STAR2, STAR3, STAR4, STAR5}
enum SRStatus {Unanswered, Answered, Resolved, Outdated}
enum Sex {Male, Female}
enum EnrollmentStatus {Accepted, Denied, Pending}
enum AgrStatus{Agree, Disagree}


-- DATATYPE CLASSES --
class Date 
attributes 
    day: Integer
    month: Integer
    year: Integer
operations
    DateInit(d: Integer, m: Integer, y: Integer)
    begin
        self.day := d;
        self.month := m;
        self.year:= y;
    end
end

class Period  
--to be used to show a range of days on a calendar or period within which a service is offered
attributes
    startDate: Date
    endDate: Date
operations
    PeriodInit(sDate: Date, eDate: Date)
    begin
        self.startDate := sDate;
        self.endDate := eDate;
    end
end


-- ABSTRACT CLASSES --

abstract class User 
attributes 
    fname: String
    lname: String
    sex: Sex
    location: String
operations
    UserInit(f:String, l:String, s:Sex, loc:String)
    begin   
        self.fname := f;
        self.lname := l;
        self.sex := s;
        self.location := loc;
    end 
end 



-- CONCRETE CLASSES --

class Child
attributes
    fname: String
    lname: String
    dob: Date
    sex: Sex
    grade: Grade
    subjects: Set (String) 
    modesOfDelivery: Set (ModeOfDelivery) 
    serviceTypes: Set (ServiceType) 
    specialNeeds: Set (String) 
    location: String 
    age: Integer
operations
    ChildInit(f:String, l:String, d:Date, s:Sex, g:Grade, sub:Set (String), mod:Set (ModeOfDelivery), sts:Set (ServiceType), sns: Set(String), loc:String, age:Integer)
    begin   
        self.fname := f;
        self.lname := l;
        self.dob := d;
        self.sex := s; 
        self.grade := g;
        self.subjects := sub;
        self.modesOfDelivery := mod;
        self.serviceTypes := sts; 
        self.specialNeeds := sns;
        self.location := loc;
        self.age:= age; 
    end
constraints
    --A child must have a minimum age of 5 and a child must be below the age of 19. 
    inv ageFiveToNineteen:
        self.age >= 5 and self.age < 19
end

class SpecialRequest 
attributes
    msgBody: String 
    --tags: String
    grade: Grade
    subjects: Set (String)
    modesOfDelivery: Set (ModeOfDelivery)
    specialNeeds: Set (String)
    location: String 
    status: SRStatus
    neededBy: Date
    daysPast: Integer
operations  
    SpecialRequestInit(msg:String, t:String, g:Grade, s:Set (String), mod:Set (ModeOfDelivery), sns:Set (String), loc: String, needBy:Date)
    begin   
        self.msgBody := msg;
        self.grade :=  Grade::Kg3;
        self.subjects := s;
        self.modesOfDelivery := mod;
        self.specialNeeds := sns;
        self.location := loc;
        self.status := SRStatus::Unanswered;
        self.neededBy := needBy;
        self.daysPast := 0;
    end

constraints
    --A Special Request existing without a date-needed-by date will become outdated after 31 days
    /*
    inv autoOutdate:
        if self.neededBy = null then 
            self.neededBy = SRStatus::Outdated
    */
end 

class Service
attributes
    grade: Grade
    subject: String 
    location: String
    modeOfDelivery: ModeOfDelivery
    serviceType: ServiceType
    duration: Period
    initialDur: Period 
    meetingDays: Set (Days)
    numOfSlots: Integer
    currentRun: Period
    rate: Real
    availStatus: AvailabilityStatus
operations  
    ServiceInit(g:Grade, s:String, loc:String, mod:ModeOfDelivery, st:ServiceType, d:Period, mds:Set (Days), nos:Integer, r: Real)
    begin   
        self.grade := g;
        self.subject := s;
        self.location := loc;
        self.modeOfDelivery := mod;
        self.serviceType := st;
        self.initialDur :=  d;
        self.meetingDays := mds;
        self.numOfSlots := nos;
        self.rate := r;
        self.availStatus := AvailabilityStatus::Free;
    end
constraints
    --If the mode of delivery is online then there is no meet location
    inv:
        self.modeOfDelivery = ModeOfDelivery::Online implies self.location = null
end

class Review
attributes 
    rating: Ratings
    reviewTxt: String
operations
    ReviewInit(r: Ratings, rt: String)
    begin
        self.rating := r;
        self.reviewTxt := rt;
    end
constraints
    --A Parent may review a tutor only after rating a Tutor. 
    inv:
        self.rating = null implies self.reviewTxt = null

end 

class Payment
attributes
    amount: Real
    datePayed: Date
operations
    PaymentInit(a: Real, dp: Date)
    begin   
        self.amount := a;
        self.datePayed := dp;
    end 
end

class Calendar 
attributes
    dayNotes: Set(Tuple(date:Date, note:String));
operations
    CalendarInit(dns:Set(Tuple(date:Date, note:String)))
    begin   
        self.dayNotes := dns;
    end 
end



-- EXTENDED CONCRETE CLASSES --

class Parent < User
attributes
    children: Set (Child) 
    hasPending: Boolean
operations
    ParentInit(f:String, l:String, s:Sex, loc:String, c:Set (Child))
    begin   
        self.UserInit(f, l, s, loc);
        self.children := c;
    end
constraints
    --Parents may only have one pending enrollment requests at a time. 
    /*inv:
        self.enrollmentRequest->size() <= 1  */
    --A parent may rate a tutor after Â½ of the service their child is enrolled in is completed.
        
    --A Parent may review a tutor only after rating a Tutor. 
    /*inv:
        self.rate = null implies self.review = null
      */

end

class Tutor < User
attributes 
    grades: Set (Grade)
    subjects: Set (String)
    generalStatus: GeneralStatus
    --availStatus: AvailabilityStatus --not sure if this is how it is to be done-- I think we'd keep this for each service
    certifications: Set (String)
    special_needs: Set (String)
    --services: Set(Service)
operations
    TutorInit(f:String, l:String, s:Sex, loc:String, gs:Set (Grade), subs:Set(String), sns:Set(String))
    begin   
        self.UserInit(f, l, s, loc);
        self.grades := gs;
        self.subjects := subs;
        self.generalStatus := GeneralStatus::Not_Approved;
        --self.certifications := NULL;
        self.special_needs := sns;
    end
    
    UpdateGeneralStatus(newGStatus: GeneralStatus)
    begin   
        self.generalStatus := newGStatus;
    end

    AddCertification(cert:String)
    begin
        --add cert to certifications Set
    end
constraints
    --Only tutors who are approved may offer services 
    inv:
        self.service->size() > 0 implies self.generalStatus = GeneralStatus::Approved
    --A tutor has at most 1 calendar
    --inv:
        --self.tutorCalendar->size() <= 1 
    --A Tutor may enroll many children into a service provided that the maximum enrollment capacity is not exceeded.
    --inv:
        --self.service.numOfSlots 
    --The current enrollment value must not exceed the enrollment capacity
end     



-- ASSOCIATIONS IN MODEL -- 

association ServiceOffering between
    Tutor[1] role tutor
    Service[*] role service
end

association TutorCalendar between 
    Calendar[1] role schedule
    Tutor[1] role tutor
end

association ChildCalendar between 
    Calendar[1] role schedule 
    Child[1] role student
end

association ChildOf between 
    Parent[1] role parent
    Child[1..*] role child
end

association ReviewOOOTutor between 
    Review[1] role review
    OneOnOneEnrollRequest[1] role oooService
end 

-- association GroupEnrollment between 
--association GroupEnrollment between 
--    Child[*] role students 
--    Tutor[1] role groupInstructor 
--end 

-- association RelatedReview between 
--     Rating[1] role ratings 
--     Review[0..1] role review
-- end 


association ReviewGroupTutor between 
    Review[1] role review 
    GroupEnrollRequest[1] role groupService
end


association GroupServicePayment between 
    Payment[1..*] role payments 
    GroupEnrollRequest[1] role groupService
end

association OOOServicePayment between 
    Payment[1..*] role payments 
    OneOnOneEnrollRequest[1] role oooService
end

association CreateSpecialMsg between 
    Parent[1] role spCreator 
    SpecialRequest[1..*] role request
end

-- association OneOnOneEnrollment between 
--     Child[1] role student 
--     Tutor[1] role instructor 
-- end 

-- association GroupEnrollment between 
--     Child[*] role students 
--     Tutor[1] role groupInstructor 
-- end 
-- 

-- ASSOCIATION CLASS -- 
associationclass Proposal between
    SpecialRequest[1] role request
    Tutor[1] role tutor
attributes
    proposal: String
end


associationclass Dialogue between
    Parent[1] role chatInitiator
    Tutor[1] role charRcvr
attributes 
    parent: Parent
    tutor: Tutor
    pMsg: String 
    tMsg: String 
end 

associationclass GroupEnrollRequest between 
    
    Child[*] role gparticipant
    Service[*] role gService
 
attributes
        acceptanceStatus: EnrollmentStatus
operations
    GroupEnrollRequestInit()
    begin
        self.acceptanceStatus := EnrollmentStatus:: Pending;
    end
constraints
--service type must be 'group'
    inv:
        self.gService.serviceType = ServiceType::Group
end

associationclass OneOnOneEnrollRequest between 
   
    Child[*] role oooparticipant
    Service[*] role oooService
    
attributes
    acceptanceStatus: EnrollmentStatus
    tutorAgreement: AgrStatus
    parentAgreement: AgrStatus
operations
    OneOnOneEnrollRequestInit()
    begin
        self.acceptanceStatus := EnrollmentStatus:: Pending;
        self.tutorAgreement := AgrStatus:: Disagree;
        self.parentAgreement := AgrStatus:: Disagree;
    end
constraints
--service type must be 'one-on-one'
    inv:
        oooService.serviceType = ServiceType::One_On_One
end


/*
context Parent::SendEnrollmentReq():
pre: self.hasPending = false


--parents may only send enrollment requests to Tutors  for a service whose availability is âfreeâ 

context Parent::SendEnrollmentReq():

--A parent may rate a tutor after Â½ of the service their child is enrolled in is completed.  
context Calendar::RateTutor():
pre: rating <> NULL implies duration > initialDur

*/















