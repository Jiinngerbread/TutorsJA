/* Group: TripleJ */

model TutorsJA


-- ENUMS -- 
enum GeneralStatus {Not_Approved, Approved, Verified}
enum Grade {Kg3, One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Eleven}
enum AvailabilityStatus {Free, Fully_Booked, Not_Accepting_Requests, Service_Withdrawn}
enum ActiveStatus {Not_Started, Active, Ended, Closed}
enum ModeOfDelivery {Online, Face_To_Face, Blended}
enum ServiceType {One_On_One, Group}
enum Days {Mon, Tue, Wed, Thru, Fri, Sat, Sun}
enum Ratings {STAR1, STAR2, STAR3, STAR4, STAR5}
enum SRStatus {Unanswered, Answered, Resolved, Outdated}
enum Sex {Male, Female}
enum EnrollmentStatus {Accepted, Denied, Pending}
enum AgrStatus{Agree, Disagree}



-- DATATYPE CLASSES --
class Date 
attributes 
    day: Integer
    month: Integer
    year: Integer
operations
    DateInit(d: Integer, m: Integer, y: Integer)
    begin
        self.day := d;
        self.month := m;
        self.year:= y;
    end
end

class Period  
--PREV: to be used to show a range of days on a calendar or period within which a service is offered
--still applicable? See Service
attributes
    startDate: Date
    endDate: Date
operations
    PeriodInit(sDate: Date, eDate: Date)
    begin
        self.startDate := sDate;
        self.endDate := eDate;
    end
end

class Subject
attributes
	name: String
	gradeLevel: Grade
end

class Session
attributes
	day: Days
	time: String
end

class ModeOfDel
attributes
	mod: ModeOfDelivery
end

class TypeOfService
attributes		
	type: ServiceType
end

class ArrayList
attributes
	size: Integer
end



-- ABSTRACT CLASSES --

abstract class Receiver
attributes
end 



-- CONCRETE CLASSES --

class Person
attributes
	fname: String
	lname: String
	username: String
	password: String
	sex: Sex
	isParent: Boolean
	location: String
--operations
constraints
	--<= 1 tutor role
	--isParent=True implies >= 1 child role
end 

class Service
attributes
	grade: Grade
    subjects: ArrayList //because may need to teach more than subject esp for services to meet special requests; these subjects may also be at varying grade levels
    location: String
    modeOfDelivery: ModeOfDel 
    serviceType: TypeOfService
    duration: Period
    initialDur: Period --?
    meetingDays: ArrayList //list of Session objects
    numOfSpaces: Integer
    currentDate: Date 
    rate: Real
    availStatus: AvailabilityStatus
	activeStatus: ActiveStatus 
operations
	UpdateActiveStatus()
	begin
		if self.tutor.schedule.attendance->forAll(a | a.present = true) then
			begin 
				self.activeStatus := ActiveStatus::Closed
			end;
		end;
		if self.tutor.schedule.attendance->exists(a | a.present = true) then
			begin 
				self.activeStatus := ActiveStatus::Active
			end;
		else
			begin 
				self.activeStatus := ActiveStatus::Not_Started
			end;
		end;

	end
	pre: self.tutor.schedule.attendance->size() > 0 
	post: self.activeStatus <> null
constraints
	--If the mode of delivery is online then there is no meet location
    inv:
        self.modeOfDelivery.mod = ModeOfDelivery::Online implies self.location = null
end

class Review
attributes 
    rating: Ratings
    reviewTxt: String
operations
	setRating(r:Ratings) 
		begin
			self.rating := r;
		end

	setReviewTxt(t:String)
		begin		
			self.reviewTxt := t;
		end 
constraints
	--A Parent may review a tutor only after rating a Tutor. 
    inv:
        self.rating = null implies self.reviewTxt = null
end 

class Payment
attributes
    amount: Real
    datePayed: Date
end

class Message
attributes
	topic: String
	text: String
	date: Date
	-- DONE attachments (association) // DONE
	--isProposal: Boolean --doing it this way? // So far: no
--operations
--constraints
end 

class Attachment
end

class Calendar
end

class Schedule
end

class Slot
attributes
	lessonInfo: String 
	date: Date
	time: String
end

class SpecialNeed
attributes
	need: String
	description: String
end

class Certification
attributes
	name: String
	knowledgeArea: String
	certifyingBody: String
	dateOfCertification: String
	validDuration: Period
end


-- EXTENDED CONCRETE CLASSES --
class Role < Receiver
attributes	
	modesOfDelivery: ArrayList //list of ModeOfDel objects
	subjects: ArrayList //list of Subject objects
	serviceTypes: ArrayList //list of TypeOfService objects
	-- DONE specialNeeds (association) //DONE
end

class Child < Role
attributes
	chName: String
	grade: Grade
	dob: Date
	chSex: Sex
	age: Integer
operations
	isRelevantTutorForChild(t: Tutor): Boolean =
			let childSubjects: Set(Subject) = subjects.subject, 
				childMODs: Set(ModeOfDel) = modesOfDelivery.modeOfDel, 
				childTOSs: Set(TypeOfService) = serviceTypes.typeOfService, 
				subjBool: Boolean = t.subjects.subject->intersection(childSubjects)->size() > 0, 
				modBool: Boolean = t.modesOfDelivery.modeOfDel->intersection(childMODs)->size() > 0, 
				tosBool: Boolean = t.serviceTypes.typeOfService->intersection(childTOSs)->size() > 0 

				in
				
				subjBool and modBool and tosBool

	listRelevantTutors(): Set(Tutor)
		begin
			result := Tutor.allInstances()->select(t:Tutor|isRelevantTutorForChild(t))
		end 		
	pre: self.subjects.subject->size() > 0 --child must have subjects
	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
	-- pre: modesOfDelivery.modeOfDel->size() > 0
	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
	-- pre: serviceTypes.typeOfService->size() > 0
	-- pre: t.serviceTypes.typeOfService->size() > 0
	post: result := Tutor.allInstances()->select(t:Tutor|isRelevantTutorForChild(t))
constraints
	--A child must have a minimum age of 5 and a child must be below the age of 19. 
    inv ageFiveToNineteen:
        self.age >= 5 and self.age < 19

	--person:isParent = True implies cannot enrol with tutors who belong to the same person
end

class Tutor < Role 
attributes
	-- PREV: grades (association) //Covered by subjects attribute in role
	generalStatus: GeneralStatus
	--DONE certifications (association) //DONE
	securityCode: Integer
--operations
constraints	
	--Only tutors who are approved may offer services 
    inv:
        self.service->size() > 0 implies self.generalStatus <> GeneralStatus::Not_Approved
		
	--cannot enrol children who belong to the same person
end

class BulletinBoard < Receiver
attributes
	--?
end

class SpecialRequest < Message
attributes
	subjects: ArrayList //list of Subject objects
	modesOfDelivery: ArrayList //list of ModeOfDel objects
	--DONE specialNeeds (association) //DONE
	status: SRStatus
	neededBy: Date
	daysPast: Integer
operations
	isRelevantTutorForSpecReq(t: Tutor): Boolean =
			let srSubjects: Set(Subject) = subjects.subject, 
				srMODs: Set(ModeOfDel) = modesOfDelivery.modeOfDel, 
				subjBool: Boolean = t.subjects.subject->intersection(srSubjects)->size() > 0, 
				modBool: Boolean = t.modesOfDelivery.modeOfDel->intersection(srMODs)->size() > 0 

				in
				
				subjBool and modBool and t.serviceTypes.typeOfService->select(type = ServiceType::One_On_One)->size() > 0

	listRelevantTutorsSR(): Set(Tutor)
		begin
			result := Tutor.allInstances()->select(t:Tutor|isRelevantTutorForSpecReq(t))
		end 		
	pre: self.subjects.subject->size() > 0 --Spec Req must have subjects
	post: result := Tutor.allInstances()->select(t:Tutor|isRelevantTutorForSpecReq(t))
constraints
	--Receiver must be Bulletin Board
end

class Proposal < Message
attributes
	--?
end

class Image < Attachment
end

class Video < Attachment
end

class Audio < Attachment
end

class PDF < Attachment
end

class WordDoc < Attachment
end



-- ASSOCIATIONS IN MODEL -- 
association PersonRole between
	Person[1] role person
	Role[1..*] role roles
end

association ServiceOffering between
	Tutor[1] role tutor
	Service[*] role service
end

association TutorServiceReview between
	EnrolRequest[1] role tutorService
	Review[0..1] role review
end

association ServicePayments between
	EnrolRequest[1] role tutorService
	Payment[*] role payment
end

association SentMessages between
	Role[1] role sender
	Message[*] role sentMsgs
end  

association ReceivedMessages between
	Receiver[1] role receiver
	Message[*] role rcvdMsgs
end 

association SpecReqResponses between
	SpecialRequest[1] role specialRequest 
	Proposal[*] role proposals
end

association MsgMedia between
	Message[1] role message
	Attachment[*] role attachments 
end

association CalendarforSchedule between
	Calendar[1] 
	Schedule[*] role schedules
end

association TutorSchedule between
	Tutor[1] 
	Schedule[1] 
end

association ChildSchedule between
	Child[1] 
	Schedule[1] 
end

-- association ScheduleSlots between
-- 	Schedule[*] role schedulesWithSlot
-- 	Slot[*] role slots
-- end

association ServiceTimeSlots between
	Service[1]
	Slot[*] role timeSlots
end

association MembershipPayments between
	Tutor[1]
	Payment[*] role payments
end 

--Associations Replacing Sets--
association SubjectArrayList between
	Subject[*]
	ArrayList[*]
end

association SessionArrayList between
	Session[*]
	ArrayList[*]
end

association	MODArrayList between
	ModeOfDel[*]
	ArrayList[*]
end

association	TOSArrayList between
	TypeOfService[*]
	ArrayList[*]
end

association RoleSpecNeeds between
	Role[1]
	SpecialNeed[*] role specNeeds
end

association SpecReqSpecNeeds between
	SpecialRequest[1]
	SpecialNeed[*] role specNeeds
end

association tutorCertifications between
	Tutor[1]
	Certification[*] role certifications
end


-- ASSOCIATION CLASS -- 
associationclass EnrolRequest between
	Child[*] role tutee
	Service[*] role service
attributes
	acceptanceStatus: EnrollmentStatus
	tutorAgreement: AgrStatus
    parentAgreement: AgrStatus
operations
	canReviewService() : Boolean =
		let attendances: Set(Attendance) = tutee.schedule.attendance, 
			numOfSlots: Integer = attendances->size()

		 in
			attendances.select(present = true)->size() >= numOfSlots/2
			and
			self.acceptanceStatus = EnrollmentStatus::Accepted
		
	reviewService(rating:Ratings, text:String)
		begin
			declare r:Review;
			r := new Review();
			r.setRating(rating);
			r.setReviewTxt(text);
		end
	
	pre: canReviewService()
	pre: text <> null 
	pre: rating <> null 
	post: self.review = text 
	post: self.service.enrolRequest.review->size() = self.service.enrolRequest.review@pre->size() + 1

	--setting of attributes differs based on value for serviceType of the Service
constraints
	-- consider multiplicities for group vs ooo
end 


associationclass Attendance between
 	Schedule[*] role schedulesWithSlot
 	Slot[*] role slots
attributes
	present: Boolean
end
