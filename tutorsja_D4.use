/* Group: TripleJ */

model TutorsJA


-- ENUMS -- 
enum Sex {Male, Female}
enum Grade {Kg3, One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Eleven}
enum SubjectName {Math, EngLang, EngLit, Spanish, History, Science, SocStudies, IT, ReadingComp, Phonics, Penmanship, Art, Music, POB, Accounts, Physics, Chemistry, Biology, Geography}
enum GeneralStatus {Not_Approved, Approved, Verified}
enum AccountStatus {Good, Delinquent}
enum Days {Mon, Tue, Wed, Thru, Fri, Sat, Sun}
enum ModeOfDelivery {Online, Face_To_Face, Blended}
enum ServiceType {One_On_One, Group}
enum AvailabilityStatus {Free, Fully_Booked, Not_Accepting_Requests, Service_Withdrawn}
enum ActiveStatus {Not_Started, Active, Ended, Closed}
enum EnrollmentStatus {Accepted, Denied, Pending}
enum AgrStatus{Agree, Disagree}
enum Ratings {STAR1, STAR2, STAR3, STAR4, STAR5}
enum SRStatus {Unanswered, Answered, Resolved, Outdated}
enum MatchLeveL {None, Weak, Moderate, Strong}
-- enum SubscriptionPeriod{Monthly, ThreeMonths, Annual}



-- DATATYPE CLASSES --
class Time 
attributes 
	hour: Integer
	min: Integer
operations
    TimeInit(h: Integer, min: Integer)
    begin
        self.hour := h;
		self.min := min;
    end

	equalsT(t: Time)
	begin
	end

	beforeT(t: Time)
	begin
	end
end

class Date 
attributes 
	day: Integer
    month: Integer
    year: Integer
operations
    DateInit(d: Integer, m: Integer, y: Integer)
    begin
        self.day := d;
        self.month := m;
        self.year:= y;
    end

	equalsD(d: Date)
	begin
	end

	beforeD(d: Date)
	begin
	end
end

class Period  
attributes
    startDate: Date
    endDate: Date
operations
    PeriodInit(sDate: Date, eDate: Date)
    begin
        self.startDate := sDate;
        self.endDate := eDate;
    end

	equals(p:Period)
	begin
	end

	isGreaterThan(p:Period)
	begin
	end

	before(p:Period)
	begin
	end

	overlap(p:Period)
	begin
	end

	contains(p:Period)
	begin
	end
end

class Subject
attributes
	name: SubjectName
	gradeLevel: Grade
end

class Session
attributes
	day: Days
	startTime: Time 
	endTime: Time 
	recurring: Boolean
	startRecurring: Date
	endRecurring: Date
	duration: Period
    -- initialDur: Period --?
end

class ModeOfDel
attributes
	mod: ModeOfDelivery
end

class TypeOfService
attributes		
	type: ServiceType
end


-- ABSTRACT CLASSES --

-- abstract class Receiver
-- attributes
-- end 

abstract class Role 
attributes	
end

-- CONCRETE CLASSES --

class Person
attributes
	fname: String
	lname: String
	username: String
	password: String
	sex: Sex
	isParent: Boolean
	location: String
--operations
constraints
	--<= 1 tutor role
	--isParent=True implies >= 1 child role
end 

class Service
attributes
	gradeLvl: Grade
    location: String
    numOfSpaces: Integer init: 1
    currentDate: Date 
    rate: Real
    availStatus: AvailabilityStatus
	activeStatus: ActiveStatus 
-- operations
--  UpdateNumOfSpaces(num:Integer)
	--pre: type of service is group
	--pre: self.tutor.accStatus <> delinquent and self.tutor.generalStatus <> Not_Approved
	--post:  if type of service is group, nuOfSpaces = nuOfSpaces@pre + num

-- 	UpdateActiveStatus()
-- 	begin
-- 		if self.tutor.schedule.attendance->forAll(a | a.present = true) then
-- 			begin 
-- 				self.activeStatus := ActiveStatus::Closed
-- 			end;
-- 		end;
-- 		if self.tutor.schedule.attendance->exists(a | a.present = true) then
-- 			begin 
-- 				self.activeStatus := ActiveStatus::Active
-- 			end;
-- 		else
-- 			begin 
-- 				self.activeStatus := ActiveStatus::Not_Started
-- 			end;
-- 		end;

-- 	end
-- 	pre: self.tutor.accStatus <> delinquent and self.tutor.generalStatus <> Not_Approved
-- 	pre: self.tutor.schedule.attendance->size() > 0 ?
-- 	post: self.activeStatus <> null

-- requestOOOEnrollment(c: Child)
	-- pre: re tutor (t) of service: matchLevelforTutorandChild(t) <> MatchLevel::None)	

-- requestGroupEnrollment(c: Child)
	-- pre: re tutor (t) of service: matchLevelforTutorandChild(t) <> MatchLevel::None)	

constraints
	--If the mode of delivery is online then there is no meet location //UPDATE - TBD: if online, put online platform
    -- inv:
    --     self.modeOfDelivery.mod = ModeOfDelivery::Online implies self.location = null

	--number of enrollment requests with Accepted status <= numOfSpaces
end

class Review
attributes 
    rating: Ratings
    reviewTxt: String
operations
	setRating(r:Ratings) 
		begin
			self.rating := r;
			--if num of reviews >= 10, call updateAccStatus()
		end

	setReviewTxt(t:String)
		begin		
			self.reviewTxt := t;
		end 
constraints
	--A Parent may review a tutor only after rating a Tutor. 
    inv:
        self.rating = null implies self.reviewTxt = null
end 

class Payment
attributes
    amountPaid: Real
    datePaid: Date
operations
	deriveAmountToBePaid(m:Payment)
	begin
	end
end

class Message
attributes
	topic: String
	text: String
	date: DateTime
--operations
--constraints
end 

class Attachment
end

class Slot
attributes
	lessonInfo: String 
	date: Date
	-- time: String
	-- sessionNum: Integer
end

class SpecialNeed
attributes
	need: String
	description: String
end

class Certification
attributes
	name: String
	knowledgeArea: Subject -- having this be subject will make it easier to search 
	certifyingBody: String
	dateOfCertification: Date
	validDuration: Period
	--verifiedStatus
operations
	update(c:Certification)
	begin
	--doc and vd and the attachment needs to be updated 
	end
	--verifyCertification
end

class BulletinBoard 
attributes
	--?
end

-- -- EXTENDED ABSTRACT CLASSES --
-- abstract class Role < Receiver
-- attributes	
-- 	status: AccountStatus
-- end


-- EXTENDED CONCRETE CLASSES --
class DateTime < Date, Time
end

-- class Role < Receiver
-- attributes	
-- 	status: AccountStatus
-- end

class Child < Role
attributes
	chName: String
	gradeLvl: Grade
	dob: Date
	chSex: Sex
	age: Integer
-- operations
-- 	matchLevelforTutorandChild(t: Tutor): MatchLevel 
		--begin
			--result := MatchLevel::None
-- 			let childSubjects: Set(Subject) = subjects.subject, 
-- 				childMODs: Set(ModeOfDel) = modesOfDelivery.modeOfDel, 
-- 				childTOSs: Set(TypeOfService) = serviceTypes.typeOfService, 
-- 				subjBool: Boolean = t.subjects.subject->intersection(childSubjects)->size() > 0, 
-- 				modBool: Boolean = t.modesOfDelivery.modeOfDel->intersection(childMODs)->size() > 0, 
-- 				tosBool: Boolean = t.serviceTypes.typeOfService->intersection(childTOSs)->size() > 0 

-- 				in
				--if subjBool and not others, result := MatchLevel::Weak
				--if (subjBool and modBool) or (subjBool and tosBool), result := MatchLeveL::Moderate
				--if subjBool and modBool and tosBool, result := MatchLeveL::Strong
				--(IGNORE IF initialization after begin is possible) else, result := MatchLevel::None
			--end
			-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
			-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
			-- pre: modesOfDelivery.modeOfDel->size() > 0
			-- pre: t.modesOfDelivery.modeOfDel->size() > 0
			-- pre: serviceTypes.typeOfService->size() > 0
			-- pre: t.serviceTypes.typeOfService->size() > 0
			--pre: tutor generalStatus <> GeneralStatus::Not_Approved
			--post: if subjBool and not others, result := MatchLevel::Weak
			--post: if (subjBool and modBool) or (subjBool and tosBool), result := MatchLeveL::Moderate
			--post: if subjBool and modBool and tosBool, result := MatchLeveL::Strong
			--post: (IGNORE IF initialization after begin is possible) else, result := MatchLevel::None

--listWeakMatchTutors(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Weak)
-- 		end 		
-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
-- 	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
-- 	-- pre: modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: serviceTypes.typeOfService->size() > 0
-- 	-- pre: t.serviceTypes.typeOfService->size() > 0
-- 	post: result = Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Weak)


--listModerateMatchTutors(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Moderate)
-- 		end 	
-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
-- 	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
-- 	-- pre: modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: serviceTypes.typeOfService->size() > 0
-- 	-- pre: t.serviceTypes.typeOfService->size() > 0
-- 	post: result = Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Moderate)	


--listStrongMatchTutors(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Strong)
-- 		end 		
-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
-- 	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
-- 	-- pre: modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: serviceTypes.typeOfService->size() > 0
-- 	-- pre: t.serviceTypes.typeOfService->size() > 0
-- 	post: result = Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Strong)

--IGNORE:
-- 	listRelevantTutors(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|isRelevantTutorForChild(t))
-- 		end 		
-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
-- 	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
-- 	-- pre: modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: serviceTypes.typeOfService->size() > 0
-- 	-- pre: t.serviceTypes.typeOfService->size() > 0
-- 	post: result = Tutor.allInstances()->select(t:Tutor|isRelevantTutorForChild(t))
constraints
	--A child must have a minimum age of 5 and a child must be below the age of 19. 
    inv ageFiveToNineteen:
        self.age >= 5 and self.age < 19

	--person:isParent = True implies cannot enrol with tutors who belong to the same person
end

class Tutor < Role 
attributes
	generalStatus: GeneralStatus
	joinDate: Date 
	securityCode: Integer
	accStatus: AccountStatus
--operations
	--updateAccStatus 
		--delinquent if >= 10 reviews and average rating is <=1 
		--delinquent if no subscription payment for last month (remember that if they don't pay monthly have to check months covered by last payment for year/3 months)
		--@* see comment in doc

	--addService 
		--pre: accStatus <> delinquent and generalStatus <> Not_Approved
		--post: if type is group numOfSpaces > 1
		--post: if type is One_on_One, numOfSpaces = 1

	--addCertification
	--confirmIdentity
	--updateGenStatus *verified if all certifications have verified status (not yet implemented)
constraints	
	--if status = delinquent all services should have service withdrawn status

	--Only tutors who are approved may offer services 
    inv:
        self.service->size() > 0 implies self.generalStatus <> GeneralStatus::Not_Approved
		
	--cannot enrol children who belong to the same person
end

-- class BulletinBoard < Receiver
-- attributes
-- 	--?
-- end

class SpecialRequest < Message
attributes
	status: SRStatus
	neededBy: Date
	daysPast: Integer --init:30
-- operations
	-- setNeededBy(nb: Date) 
-- 	isRelevantTutorForSpecReq(t: Tutor): Boolean =
-- 			let srSubjects: Set(Subject) = subjects.subject, 
-- 				srMODs: Set(ModeOfDel) = modesOfDelivery.modeOfDel, 
-- 				subjBool: Boolean = t.subjects.subject->intersection(srSubjects)->size() > 0, 
-- 				modBool: Boolean = t.modesOfDelivery.modeOfDel->intersection(srMODs)->size() > 0 

-- 				in
				
-- 				subjBool and modBool and t.serviceTypes.typeOfService->select(type = ServiceType::One_On_One)->size() > 0


-- 	matchLevelforTutorandChild(t: Tutor): MatchLevel 
		--begin
			--result := MatchLevel::None
-- 			let childSubjects: Set(Subject) = subjects.subject, 
-- 				childMODs: Set(ModeOfDel) = modesOfDelivery.modeOfDel, 
-- 				childTOSs: Set(TypeOfService) = serviceTypes.typeOfService, 
-- 				subjBool: Boolean = t.subjects.subject->intersection(childSubjects)->size() > 0, 
-- 				modBool: Boolean = t.modesOfDelivery.modeOfDel->intersection(childMODs)->size() > 0, 
-- 				tosBool: Boolean = t.serviceTypes.typeOfService->intersection(childTOSs)->size() > 0 

-- 				in
				--if subjBool and not others, result := MatchLevel::Weak
				--if (subjBool and modBool) or (subjBool and tosBool), result := MatchLeveL::Moderate
				--if subjBool and modBool and tosBool, result := MatchLeveL::Strong
				--(IGNORE IF initialization after begin is possible) else, result := MatchLevel::None
			--end
			-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
			-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
			-- pre: modesOfDelivery.modeOfDel->size() > 0
			-- pre: t.modesOfDelivery.modeOfDel->size() > 0
			-- pre: serviceTypes.typeOfService->size() > 0
			-- pre: t.serviceTypes.typeOfService->size() > 0
			--pre: tutor generalStatus <> GeneralStatus::Not_Approved
			--post: if subjBool and not others, result := MatchLevel::Weak
			--post: if (subjBool and modBool) or (subjBool and tosBool), result := MatchLeveL::Moderate
			--post: if subjBool and modBool and tosBool, result := MatchLeveL::Strong
			--post: (IGNORE IF initialization after begin is possible) else, result := MatchLevel::None

--listWeakMatchTutors(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Weak)
-- 		end 		
-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
-- 	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
-- 	-- pre: modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: serviceTypes.typeOfService->size() > 0
-- 	-- pre: t.serviceTypes.typeOfService->size() > 0
-- 	post: result = Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Weak)


--listModerateMatchTutors(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Moderate)
-- 		end 	
-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
-- 	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
-- 	-- pre: modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: serviceTypes.typeOfService->size() > 0
-- 	-- pre: t.serviceTypes.typeOfService->size() > 0
-- 	post: result = Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Moderate)	


--listStrongMatchTutors(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Strong)
-- 		end 		
-- 	pre: self.subjects.subject->size() > 0 --child must have subjects
-- 	-- pre: t.subjects.subject->size() > 0 --tutor must have subjects
-- 	-- pre: modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: t.modesOfDelivery.modeOfDel->size() > 0
-- 	-- pre: serviceTypes.typeOfService->size() > 0
-- 	-- pre: t.serviceTypes.typeOfService->size() > 0
-- 	post: result = Tutor.allInstances()->select(t:Tutor|matchLevelforTutorandChild(t)=MatchLevel::Strong)

--IGNORE:
-- 	listRelevantTutorsSR(): Set(Tutor)
-- 		begin
-- 			result := Tutor.allInstances()->select(t:Tutor|isRelevantTutorForSpecReq(t))
-- 		end 		
-- 	pre: self.subjects.subject->size() > 0 --Spec Req must have subjects
-- 	post: result = Tutor.allInstances()->select(t:Tutor|isRelevantTutorForSpecReq(t))
constraints
	--Receiver must be Bulletin Board
	--if neededBy has passed then status = outdated
end

class Proposal < Message
attributes
	--?
end

class Image < Attachment
end

class Video < Attachment
end

class Audio < Attachment
end

class PDF < Attachment
end

class WordDoc < Attachment
end


class Subscription < Payment
attributes 
	subscrPeriod: SubscriptionPeriod
	periodPaidFor: Period
	subscrRate: Integer
end

-- class PaymentToTutor < Payment
-- attributes
-- 	TutotServiceRate: Integer
-- end


-- ASSOCIATIONS IN MODEL -- 
association PersonRole between
	Person[1] role person
	Role[1..*] role roles
end

association ServiceOffering between
	Tutor[1] role tutor
	Service[*] role service
end

association TutorServiceReview between
	EnrolRequest[1] role tutorService
	Review[0..1] role review
end

association ServicePayments between
	EnrolRequest[1] role tutorService
	Payment[*] role payment
	-- PaymentToTutor[1..*] role payment
end

association SentMessages between
	Role[1] role sender
	Message[*] role sentMsgs
end  

-- association ReceivedMessages between
-- 	Receiver[1] role receiver
-- 	Message[*] role rcvdMsgs
-- end 

association ReceivedSRMessages between
	BulletinBoard[0..1] role srreceiver
	Message[*] role rcvdMsgs
end 

association ReceivedMessages between
	Role[0..1] role receiver
	Message[*] role rcvdMsgs
end 

association SpecReqResponses between
	-- SpecialRequest[1] role specialRequest 
	SpecialRequest[*] role specialRequests --see changes list in doc for reason
	Proposal[*] role proposals
end

association MsgMedia between
	Message[1] role message
	Attachment[*] role attachments 
end

--NEW--
association ScannedCert between
	Certification[1] role uploadedCert
	Attachment[*] role scan
end

-- association TutorSession between
-- 	Tutor[1] 
-- 	Session[*] 
-- end

-- association ChildSession between
-- 	Child[1] 
-- 	Session[*] 
-- end

association SessionSlots between
	-- Session[*] 
	Session[1]
	Slot[1..*]
end

association MembershipPayments between
	Tutor[1]
	-- Payment[*] role payments
	Subscription[1..*] role payments
end 


--Associations Replacing Sets--

association RoleSpecNeeds between
	Role[1]
	SpecialNeed[*] role specNeeds
end

association SpecReqSpecNeeds between
	SpecialRequest[1]
	SpecialNeed[*] role specNeeds
end

association tutorCertifications between
	Tutor[1]
	Certification[*] role certifications
end


-- >Role Sets<--
association  SubjectsOfInterest between
	Subject[*] role subjectOffering
	-- Role[1]
	Role[*]
end

association ModeOfInterest between
	ModeOfDel[*] role MODBeingOffered
	-- Role[1]
	Role[*]
end 

association ServiceTypeInterestedIn between
	TypeOfService[*] role TOSbeingOffered
	-- Role[1]
	Role[*]
end

-- >Service Association Sets
association SubjectOfTutorService between 
	Subject[1] role subjOfService
	-- Service[1]
	Service[*]
end 

-- association SubjectOfChildInterest between
-- 	Subject[*] role SubjsInterestedIn
-- 	Child[1]
-- end

association MODofTutorService between
	-- ModeOfDel[1..*] role MODofService
	ModeOfDel[1] role MODofService
	-- Service[1]
	Service[*]
end 

-- association MODofChildInterest between
-- 	ModeOfDel[*] role MODinterestedIn
-- 	Child[1]
-- end

association ServiceTypeOfTutorService between
	TypeOfService[1] role TypeOfTheService
	-- Service[1]
	Service[*]
end

-- association TOSofChildInterest between
-- 	TypeOfService[*] role TOSInterestedIn
-- 	Child[1]
-- end

association SessionsOfService between
	Session[1..*] role sessionsInServ
	Service[1] role serv
end

-- >Special Request Association Sets
association SubjectOfSR between
	-- Subject[*]
	Subject[1] --see changes list in doc for reason
	-- SpecialRequest[1]
	SpecialRequest[*]
end

association ModeOfInterestOfSR between
	-- ModeOfDel[*]
	ModeOfDel[1] 
	-- SpecialRequest[1]
	SpecialRequest[*]
end

association ServiceTypeOfInterestOfSR between
	-- TypeOfService[*]
	TypeOfService[1] 
	-- SpecialRequest[1]
	SpecialRequest[*]
end


-- ASSOCIATION CLASS -- 
associationclass EnrolRequest between
	Child[*] role tutee
	Service[*] role service
attributes
	acceptanceStatus: EnrollmentStatus 	init: EnrollmentStatus::Pending
	tutorAgreement: AgrStatus	 init: AgrStatus::Denied
    parentAgreement: AgrStatus 		init: AgrStatus::Denied
-- operations
	--updateAcceptStatus() --what argument? string ('A', 'D') A-Accept, D - Deny, boolean?
		--if accepting, check numOfSpaces and compare to size of set of EnrolReq objects with accepted status (from Service)
			-- if set size is = numOfSpaces, acceptanceStatus = EnrollmentStatus::Denied
			--else acceptanceStatus = EnrollmentStatus::Accepted
		--if denying, acceptanceStatus = EnrollmentStatus::Denied

		--pre: 
		--post: if accepting and set size is < numOfSpaces, acceptanceStatus = Accepted
		--post: if accepting and set size is = numOfSpaces, acceptanceStatus = Denied

-- 	canReviewService() : Boolean =
-- 		let attendances: Set(Attendance) = tutee.schedule.attendance, 
-- 			numOfSlots: Integer = attendances->size()

-- 		 in
-- 			attendances.select(present = true)->size() >= numOfSlots/2
-- 			and
-- 			self.acceptanceStatus = EnrollmentStatus::Accepted
		
-- 	reviewService(rating:Ratings, text:String)
-- 		begin
-- 			declare r:Review;
-- 			r := new Review();
-- 			r.setRating(rating);
-- 			r.setReviewTxt(text);
-- 		end
	
-- 	pre: canReviewService()
-- 	pre: text <> null 
-- 	pre: rating <> null 
-- 	post: self.review = text 
-- 	post: self.service.enrolRequest.review->size() = self.service.enrolRequest.review@pre->size() + 1

	--setting of attributes differs based on value for serviceType of the Service
constraints
	-- consider multiplicities for group vs ooo
	-- re tutor (t) of service: matchLevelforTutorandChild(t) <> MatchLevel::None)	
end 


associationclass Attendance between
	Role[1..*] role participant
	Slot[*] role classDate
attributes
	present: Boolean
end



------Constraints Outside of Classes------
